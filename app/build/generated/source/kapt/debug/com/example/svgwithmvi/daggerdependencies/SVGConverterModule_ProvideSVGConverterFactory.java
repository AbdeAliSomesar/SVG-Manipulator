// Generated by Dagger (https://google.github.io/dagger).
package com.example.svgwithmvi.daggerdependencies;

import com.example.testproject.shapehandler.Converter;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class SVGConverterModule_ProvideSVGConverterFactory implements Factory<Converter> {
  private final SVGConverterModule module;

  public SVGConverterModule_ProvideSVGConverterFactory(SVGConverterModule module) {
    this.module = module;
  }

  @Override
  public Converter get() {
    return provideInstance(module);
  }

  public static Converter provideInstance(SVGConverterModule module) {
    return proxyProvideSVGConverter(module);
  }

  public static SVGConverterModule_ProvideSVGConverterFactory create(SVGConverterModule module) {
    return new SVGConverterModule_ProvideSVGConverterFactory(module);
  }

  public static Converter proxyProvideSVGConverter(SVGConverterModule instance) {
    return Preconditions.checkNotNull(
        instance.provideSVGConverter(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
