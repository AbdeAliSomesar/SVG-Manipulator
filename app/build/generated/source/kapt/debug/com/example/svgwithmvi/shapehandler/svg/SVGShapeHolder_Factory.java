// Generated by Dagger (https://google.github.io/dagger).
package com.example.svgwithmvi.shapehandler.svg;

import com.example.testproject.shapehandler.Converter;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class SVGShapeHolder_Factory implements Factory<SVGShapeHolder> {
  private final Provider<Converter> converterProvider;

  public SVGShapeHolder_Factory(Provider<Converter> converterProvider) {
    this.converterProvider = converterProvider;
  }

  @Override
  public SVGShapeHolder get() {
    return provideInstance(converterProvider);
  }

  public static SVGShapeHolder provideInstance(Provider<Converter> converterProvider) {
    return new SVGShapeHolder(converterProvider.get());
  }

  public static SVGShapeHolder_Factory create(Provider<Converter> converterProvider) {
    return new SVGShapeHolder_Factory(converterProvider);
  }

  public static SVGShapeHolder newSVGShapeHolder(Converter converter) {
    return new SVGShapeHolder(converter);
  }
}
