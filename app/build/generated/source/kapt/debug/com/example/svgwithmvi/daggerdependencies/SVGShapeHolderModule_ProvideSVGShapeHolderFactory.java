// Generated by Dagger (https://google.github.io/dagger).
package com.example.svgwithmvi.daggerdependencies;

import com.example.testproject.shapehandler.ShapeHolder;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class SVGShapeHolderModule_ProvideSVGShapeHolderFactory
    implements Factory<ShapeHolder> {
  private final SVGShapeHolderModule module;

  public SVGShapeHolderModule_ProvideSVGShapeHolderFactory(SVGShapeHolderModule module) {
    this.module = module;
  }

  @Override
  public ShapeHolder get() {
    return provideInstance(module);
  }

  public static ShapeHolder provideInstance(SVGShapeHolderModule module) {
    return proxyProvideSVGShapeHolder(module);
  }

  public static SVGShapeHolderModule_ProvideSVGShapeHolderFactory create(
      SVGShapeHolderModule module) {
    return new SVGShapeHolderModule_ProvideSVGShapeHolderFactory(module);
  }

  public static ShapeHolder proxyProvideSVGShapeHolder(SVGShapeHolderModule instance) {
    return Preconditions.checkNotNull(
        instance.provideSVGShapeHolder(),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
