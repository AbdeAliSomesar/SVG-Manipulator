// Generated by Dagger (https://google.github.io/dagger).
package com.example.svgwithmvi.shapehandler.SVG;

import com.example.testproject.shapehandler.Converter;
import com.example.testproject.shapehandler.ShapeGenerator;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class SVGShapeManager_Factory implements Factory<SVGShapeManager> {
  private final Provider<ShapeGenerator> shapeGeneratorProvider;

  private final Provider<Converter> converterProvider;

  public SVGShapeManager_Factory(
      Provider<ShapeGenerator> shapeGeneratorProvider, Provider<Converter> converterProvider) {
    this.shapeGeneratorProvider = shapeGeneratorProvider;
    this.converterProvider = converterProvider;
  }

  @Override
  public SVGShapeManager get() {
    return provideInstance(shapeGeneratorProvider, converterProvider);
  }

  public static SVGShapeManager provideInstance(
      Provider<ShapeGenerator> shapeGeneratorProvider, Provider<Converter> converterProvider) {
    return new SVGShapeManager(shapeGeneratorProvider.get(), converterProvider.get());
  }

  public static SVGShapeManager_Factory create(
      Provider<ShapeGenerator> shapeGeneratorProvider, Provider<Converter> converterProvider) {
    return new SVGShapeManager_Factory(shapeGeneratorProvider, converterProvider);
  }

  public static SVGShapeManager newSVGShapeManager(
      ShapeGenerator shapeGenerator, Converter converter) {
    return new SVGShapeManager(shapeGenerator, converter);
  }
}
